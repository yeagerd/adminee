"""Create initial contacts schema

Revision ID: 24c4f9f50fed
Revises: 
Create Date: 2025-08-25 21:46:16.411176

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = "24c4f9f50fed"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if table already exists to make migration idempotent
    inspector = inspect(op.get_bind())
    if 'contacts' in inspector.get_table_names():
        # Table already exists, skip creation
        return
    
    op.create_table(
        "contacts",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("email_address", sa.String(), nullable=False),
        sa.Column("display_name", sa.String(), nullable=True),
        sa.Column("given_name", sa.String(), nullable=True),
        sa.Column("family_name", sa.String(), nullable=True),
        sa.Column("event_counts", sa.JSON(), nullable=True),
        sa.Column("total_event_count", sa.Integer(), nullable=False),
        sa.Column("last_seen", sa.DateTime(timezone=True), nullable=False),
        sa.Column("first_seen", sa.DateTime(timezone=True), nullable=False),
        sa.Column("relevance_score", sa.Float(), nullable=False),
        sa.Column("relevance_factors", sa.JSON(), nullable=True),
        sa.Column("source_services", sa.JSON(), nullable=True),
        sa.Column("tags", sa.JSON(), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column("provider", sa.String(), nullable=True),
        sa.Column("last_synced", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "phone_numbers", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("addresses", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.func.now(),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.func.now(),
            onupdate=sa.func.now(),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    # Create indexes for common query patterns
    op.create_index("idx_contacts_user_id", "contacts", ["user_id"])
    op.create_index("idx_contacts_email", "contacts", ["email_address"])
    op.create_index("idx_contacts_relevance", "contacts", ["relevance_score"])
    op.create_index("idx_contacts_last_seen", "contacts", ["last_seen"])
    op.create_index("idx_contacts_provider", "contacts", ["provider"])

    # Create unique constraint for user_id + email_address combination
    op.create_unique_constraint(
        "idx_contacts_user_email", "contacts", ["user_id", "email_address"]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop indexes and constraints first
    op.drop_index("idx_contacts_user_email", table_name="contacts")
    op.drop_index("idx_contacts_provider", table_name="contacts")
    op.drop_index("idx_contacts_last_seen", table_name="contacts")
    op.drop_index("idx_contacts_relevance", table_name="contacts")
    op.drop_index("idx_contacts_email", table_name="contacts")
    op.drop_index("idx_contacts_user_id", table_name="contacts")

    # Drop table
    op.drop_table("contacts")
    # ### end Alembic commands ###
