# Dockerfile for Chat Service (Python/FastAPI)

# Use an official Python runtime as a parent image
FROM python:3.11-slim-bullseye

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set work directory
WORKDIR /app

# Set Python path to include the services directory
ENV PYTHONPATH=/app

# Environment configuration - REQUIRED at build time
ARG ENVIRONMENT
ENV ENVIRONMENT=${ENVIRONMENT}

# Validate ENVIRONMENT value
RUN if [ -z "$ENVIRONMENT" ]; then \
        echo "ERROR: ENVIRONMENT build arg is required (local|staging|production)" && exit 1; \
    fi && \
    if [ "$ENVIRONMENT" != "local" ] && [ "$ENVIRONMENT" != "staging" ] && [ "$ENVIRONMENT" != "production" ]; then \
        echo "ERROR: ENVIRONMENT must be one of: local, staging, production. Got: $ENVIRONMENT" && exit 1; \
    fi

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
# First, copy only the requirements file to leverage Docker cache
COPY services/chat_service/requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Copy the rest of the application code for the chat service
COPY services/chat_service/ /app/services/chat_service/

# Service URL environment variables (non-sensitive)
ENV USER_MANAGEMENT_SERVICE_URL="http://user-management:8001"
ENV OFFICE_SERVICE_URL="http://office-service:8080"

# API keys will be provided at runtime via docker-compose environment

# Expose the port the app runs on (e.g., 8000 for FastAPI)
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Define the command to run the application
CMD ["opentelemetry-instrument", "uvicorn", "services.chat_service.main:app", "--host", "0.0.0.0", "--port", "8000"]