name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, ready_for_review, review_requested]

jobs:
  check-generated-files:
    name: Check Generated Files Are Up to Date
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for Git operations

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv sync --all-packages --all-extras --active

      - name: Install Node.js dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Copy .env file for schema generation
        run: cp .example.env .env

      - name: Generate OpenAPI schemas
        run: |
          ./scripts/generate-api-schema.sh --schema-only

      - name: Clean existing types
        run: |
          cd frontend
          rm -rf types/api
          echo "🧹 Cleaned existing type directories"

      - name: Generate TypeScript types
        run: |
          cd frontend
          npm run generate-types

      - name: Copy .example.env to frontend/.env
        run: cp .example.env frontend/.env

      - name: Build Application
        run: |
          cd frontend
          npm run build

      - name: Check for uncommitted changes
        run: |
          # Check if any generated files have changed
          # Only check OpenAPI schema files and frontend TypeScript types
          GENERATED_FILES=$(git diff --name-only | grep -E '\.(json|ts|tsx)$' | grep -E '(openapi/schema\.json|frontend/types/api)' || true)
          
          if [[ -n "$GENERATED_FILES" ]]; then
            echo "❌ Generated files are out of date!"
            echo "The following generated files have been modified:"
            echo "$GENERATED_FILES"
            echo ""
            echo "Please run the following commands to update generated files:"
            echo "  ./scripts/generate-api-schema.sh"
            echo "  git add . && git commit -m 'Update generated files'"
            echo ""
            echo "Note: The generate-api-schema.sh script automatically cleans existing types"
            echo "before generation, ensuring a fresh and consistent output."
            echo ""
            echo "This ensures that your PR includes the latest generated types and schemas."
            exit 1
          else
            echo "✅ All generated files are up to date!"
          fi

      - name: Show generated files status
        run: |
          echo "📊 Generated files status:"
          echo "OpenAPI schemas:"
          find services/*/openapi -name "schema.json" 2>/dev/null | wc -l | xargs echo "  - Total schemas:"
          echo "TypeScript types:"
          find frontend/types/api -type d 2>/dev/null | wc -l | xargs echo "  - Total service type directories:"
          echo ""
          echo "📋 Detailed schema status:"
          
          # Services that should have OpenAPI schemas
          EXCLUDED_SERVICES="common vector_db email_sync demos vespa_loader briefly.egg-info __pycache__ api office_router vector-db"
          missing_schemas=()
          total_expected=0
          total_found=0
          
          for service in services/*/; do
            if [[ -d "$service" ]]; then
              service_name=$(basename "$service")
              
              # Skip excluded services
              if [[ " $EXCLUDED_SERVICES " =~ " $service_name " ]]; then
                echo "  ⏭️  $service_name: excluded from schema validation"
                continue
              fi
              
              total_expected=$((total_expected + 1))
              
              if [[ -f "$service/openapi/schema.json" ]]; then
                echo "  ✅ $service_name: schema.json exists"
                total_found=$((total_found + 1))
              else
                echo "  ❌ $service_name: schema.json missing"
                missing_schemas+=("$service_name")
              fi
            fi
          done
          
          echo ""
          echo "📊 Schema validation summary:"
          echo "  - Expected schemas: $total_expected"
          echo "  - Found schemas: $total_found"
          echo "  - Missing schemas: ${#missing_schemas[@]}"
          
          if [[ ${#missing_schemas[@]} -gt 0 ]]; then
            echo ""
            echo "❌ Missing required OpenAPI schemas:"
            printf "  - %s\n" "${missing_schemas[@]}"
            echo ""
            echo "This CI check will fail. Please ensure all required services have OpenAPI schemas generated."
            exit 1
          fi
          
          echo ""
          echo "✅ All required OpenAPI schemas are present!"

  lint:
    name: Python Linting & Formatting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.cargo/registry
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies with UV
      run: |
        uv sync --all-packages --all-extras --active

    - name: Run nox (format, lint)
      run:  |
        source .venv/bin/activate
        nox -s format lint

    - name: Check for conftest.py files
      run: |
        set -euo pipefail
        # Find conftest.py in the repository while excluding tool and virtual environment directories
        mapfile -t conftest_files < <(find . \
          -type d \( -name .venv -o -name .nox -o -name .git -o -name node_modules -o -name dist -o -name build \) -prune \
          -o -type f -name "conftest.py" -print)

        if (( ${#conftest_files[@]} > 0 )); then
          echo "Error: conftest.py files are not allowed. Found the following files:"
          printf '%s\n' "${conftest_files[@]}"
          exit 1
        fi

  typecheck:
    name: Python Type Checking
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.cargo/registry
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Install dependencies with UV
      run: |
        uv sync --all-packages --all-extras --active

    - name: Run nox (typecheck)
      run: |
        source .venv/bin/activate
        nox -s typecheck

  test:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.cargo/registry
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Install dependencies with UV
      run: |
        uv sync --all-packages --all-extras --active

    - name: Run nox (test)
      run: |
        source .venv/bin/activate
        nox -s test

  coverage:
    name: Python Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.cargo/registry
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Install dependencies with UV
      run: |
        uv sync --all-packages --all-extras --active

    - name: Run nox (coverage)
      run: |
        source .venv/bin/activate
        nox -s test_cov

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Type check
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Run Jest tests
      working-directory: ./frontend
      run: npx jest --ci

    - name: Copy .example.env to frontend/.env
      run: cp .example.env frontend/.env

    - name: Set NEXTAUTH_SECRET for CI build
      working-directory: ./frontend
      run: echo "NEXTAUTH_SECRET=dummy-secret-for-ci-build-$(date +%s)" >> .env

    - name: Set NEXTAUTH_URL for CI build
      working-directory: ./frontend
      run: echo "NEXTAUTH_URL=https://github.com" >> .env

    - name: Build application
      working-directory: ./frontend
      run: npm run build

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, coverage, frontend-quality, check-generated-files]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Copy environment files for CI
      run: |
        # Copy main environment file
        cp .example.env .env
        cp .example.env gateway/.env
        cp .example.env frontend/.env
        
    - name: Set NEXTAUTH_SECRET for Docker build
      run: |
        echo "NEXTAUTH_SECRET=dummy-secret-for-ci-build-$(date +%s)" >> frontend/.env

    - name: Set NEXTAUTH_URL for Docker build
      run: |
        echo "NEXTAUTH_URL=https://github.com" >> frontend/.env

    - name: Test Docker Compose build
      env:
          # Set essential variables needed for build validation
          ENVIRONMENT: ci
      run: docker compose --env-file env.postgres.example build
