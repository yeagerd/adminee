name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, edited, synchronize]

jobs:
  validate-pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # No specific `with` configuration needed, defaults are fine.
        # All previous lines were comments after removing deprecated params.

  lint:
    name: Python Linting & Formatting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.cargo/registry
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies with UV
      run: |
        uv sync --all-packages --all-extras --active

    - name: Run nox (format, lint)
      run:  |
        source .venv/bin/activate
        nox -s format lint

  typecheck:
    name: Python Type Checking
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.cargo/registry
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Install dependencies with UV
      run: |
        uv sync --all-packages --all-extras --active

    - name: Run nox (typecheck)
      run: |
        source .venv/bin/activate
        nox -s typecheck

  test:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.cargo/registry
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Install dependencies with UV
      run: |
        uv sync --all-packages --all-extras --active

    - name: Run nox (test)
      run: |
        source .venv/bin/activate
        nox -s test

  coverage:
    name: Python Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/uv
          ~/.cargo/registry
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Install dependencies with UV
      run: |
        uv sync --all-packages --all-extras --active

    - name: Run nox (coverage)
      run: |
        source .venv/bin/activate
        nox -s test_cov

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Type check
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Run Jest tests
      working-directory: ./frontend
      run: npx jest --ci

    - name: Copy .example.env to frontend/.env
      run: cp .example.env frontend/.env

    - name: Set NEXTAUTH_SECRET for CI build
      working-directory: ./frontend
      run: echo "NEXTAUTH_SECRET=dummy-secret-for-ci-build-$(date +%s)" >> .env

    - name: Build application
      working-directory: ./frontend
      run: npm run build

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, coverage, frontend-quality]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Copy .example.env to .env
      run: |
        cp .example.env .env
        cp .example.env gateway/.env
        cp .example.env frontend/.env

    - name: Set NEXTAUTH_SECRET for Docker build
      run: |
        echo "NEXTAUTH_SECRET=dummy-secret-for-ci-build-$(date +%s)" >> frontend/.env

    - name: Test Docker Compose build
      env:
          # Only set essential variables needed for build validation
          ENVIRONMENT: test
      run: docker compose build
