name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, edited, synchronize]

jobs:
  validate-pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which types are allowed.
          # Default: https://github.com/commitizen/conventional-commit-types/blob/master/index.json
          # Example:
          # types: |
          #   feat
          #   fix
          #   chore
          #   docs
          #   style
          #   refactor
          #   perf
          #   test
          #   revert
          #   ci
          #   build
          #   improvement
          # Configure that a scope must always be provided.
          # requireScope: true
          # Configure which scopes are allowed.
          # Default: Any scope is allowed.
          # Example:
          # scopes: |
          #   core
          #   ui
          #   docs
          # Configure that the subject must not start with an uppercase character.
          # subjectPattern: ^(?![A-Z]).+$
          # Configure that the subject must not end with a period.
          # subjectPatternError: |
          #   The subject "{subject}" found in the pull request title "{title}"
          #   must not end with a period.
          # Configure additional validation for the subject based on a regex.
          # The subject="{subject}" found in the pull request title "{title}"
          # must match the regex "{subjectPattern}".
          # validateSingleCommit: true
          # If `validateSingleCommit` is true, this option allows you to ignore merge commits.
          # ignoreSingleMergeCommit: false
          # For work-in-progress PRs, you can typically use draft PRs.
          # Alternatively, you can choose to ignore PRs with certain labels.
          # The action will simply pass without checking the title.
          # ignoreLabels: |
          #   WIP
          #   ignore-semantic-pull-request
          # You can also define a list of labels that should prevent the PR from being validated.
          #
          # wip: true

  lint:
    name: Python Linting & Formatting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install tox tox-gh-actions

    - name: Run tox (format, lint)
      run: tox -e format,lint -p auto --parallel-live

  typecheck:
    name: Python Type Checking
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install tox tox-gh-actions

    - name: Run tox (typecheck)
      run: tox -e typecheck

  test:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install tox tox-gh-actions

    - name: Run tox (test)
      run: tox -e test

  coverage:
    name: Python Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install tox tox-gh-actions

    - name: Run tox (coverage)
      run: tox -e cov

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    environment: ci

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Type check
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Copy .example.env to .env
      working-directory: ./frontend
      run: cp ../.example.env .env

    - name: Build application
      working-directory: ./frontend
      env:
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          TOKEN_ENCRYPTION_SALT: ${{ secrets.TOKEN_ENCRYPTION_SALT }}
      run: npm run build

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    environment: ci
    needs: [lint, typecheck, test, coverage, frontend-quality]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker Compose build
      env:
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          TOKEN_ENCRYPTION_SALT: ${{ secrets.TOKEN_ENCRYPTION_SALT }}
      run: |
        # Create .env file for testing
        cp .example.env .env
        
        # Test that docker-compose builds successfully
        docker compose config
        docker compose build --no-cache