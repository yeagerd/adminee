{
  "openapi": "3.1.0",
  "info": {
    "title": "Briefly User Management Service",
    "description": "Manages user profiles, preferences, and OAuth integrations for the Briefly platform",
    "contact": {
      "name": "Briefly Team",
      "email": "support@briefly.ai"
    },
    "license": {
      "name": "Private"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/v1/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get current user profile",
        "description": "Get the profile of the currently authenticated user.",
        "operationId": "get_current_user_profile_v1_users_me_get",
        "responses": {
          "200": {
            "description": "Current user profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/users/me/integrations": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get current user integrations",
        "description": "Get all integrations for the currently authenticated user.",
        "operationId": "get_current_user_integrations_v1_users_me_integrations_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IntegrationProvider"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by provider",
              "title": "Provider"
            },
            "description": "Filter by provider"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IntegrationStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "include_token_info",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include token metadata",
              "default": true,
              "title": "Include Token Info"
            },
            "description": "Include token metadata"
          }
        ],
        "responses": {
          "200": {
            "description": "Current user integrations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/me/integrations/{provider}": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Disconnect current user integration",
        "description": "Disconnect an OAuth integration for the currently authenticated user.",
        "operationId": "disconnect_current_user_integration_v1_users_me_integrations__provider__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider",
              "description": "OAuth provider"
            },
            "description": "OAuth provider"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/IntegrationDisconnectRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration disconnected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationDisconnectResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Integration not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      },
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get current user specific integration",
        "description": "Get details for a specific integration of the currently authenticated user.",
        "operationId": "get_current_user_specific_integration_v1_users_me_integrations__provider__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider",
              "description": "OAuth provider"
            },
            "description": "OAuth provider"
          }
        ],
        "responses": {
          "200": {
            "description": "Integration details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Integration not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/me/integrations/{provider}/refresh": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Refresh current user integration tokens",
        "description": "Refresh access tokens for an integration of the currently authenticated user.",
        "operationId": "refresh_current_user_integration_tokens_v1_users_me_integrations__provider__refresh_put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider",
              "description": "OAuth provider"
            },
            "description": "OAuth provider"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TokenRefreshRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRefreshResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Integration not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/users/me/integrations/{provider}/health": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Check current user integration health",
        "description": "Check the health status of an integration for the currently authenticated user.",
        "operationId": "check_current_user_integration_health_v1_users_me_integrations__provider__health_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider",
              "description": "OAuth provider"
            },
            "description": "OAuth provider"
          }
        ],
        "responses": {
          "200": {
            "description": "Health check completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationHealthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Integration not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/me/integrations/{provider}/scopes": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get available OAuth scopes for provider",
        "description": "Get the list of available OAuth scopes for a specific provider.",
        "operationId": "get_provider_scopes_v1_users_me_integrations__provider__scopes_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider",
              "description": "OAuth provider"
            },
            "description": "OAuth provider"
          }
        ],
        "responses": {
          "200": {
            "description": "Scopes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get Provider Scopes V1 Users Me Integrations  Provider  Scopes Get"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Provider not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/search": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Search users",
        "description": "Search users with cursor-based pagination. For admin/service use.",
        "operationId": "search_users_v1_users_search_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Cursor token for pagination",
              "title": "Cursor"
            },
            "description": "Cursor token for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 100,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "description": "Number of users per page",
              "title": "Limit"
            },
            "description": "Number of users per page"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(next|prev)$"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Pagination direction",
              "default": "next",
              "title": "Direction"
            },
            "description": "Pagination direction"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "maxLength": 255
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search query",
              "title": "Query"
            },
            "description": "Search query"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by email",
              "title": "Email"
            },
            "description": "Filter by email"
          },
          {
            "name": "onboarding_completed",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by onboarding status",
              "title": "Onboarding Completed"
            },
            "description": "Filter by onboarding status"
          }
        ],
        "responses": {
          "200": {
            "description": "User search results retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "422": {
            "description": "Validation error in search parameters"
          },
          "400": {
            "description": "Invalid cursor token"
          }
        }
      }
    },
    "/v1/users/": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create or upsert user (OAuth/NextAuth)",
        "description": "Create a new user or return existing user by external_auth_id and auth_provider. Protected endpoint for OAuth/NextAuth flows with service authentication.",
        "operationId": "create_or_upsert_user_v1_users__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "200": {
            "description": "User already exists, returned successfully"
          },
          "401": {
            "description": "Service authentication required"
          },
          "409": {
            "description": "Email collision detected"
          },
          "422": {
            "description": "Validation error in request data"
          }
        }
      }
    },
    "/v1/users/me/integrations/oauth/start": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Start OAuth flow for current user",
        "description": "Start OAuth authorization flow for the currently authenticated user.",
        "operationId": "start_current_user_oauth_flow_v1_users_me_integrations_oauth_start_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthStartRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuth flow started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthStartResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/users/me/integrations/oauth/callback": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Complete OAuth flow for current user",
        "description": "Complete OAuth authorization flow for the currently authenticated user.",
        "operationId": "complete_current_user_oauth_flow_v1_users_me_integrations_oauth_callback_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider",
              "description": "OAuth provider"
            },
            "description": "OAuth provider"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthCallbackRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth flow completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthCallbackResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/users/me/preferences": {
      "get": {
        "tags": [
          "Preferences"
        ],
        "summary": "Get current user's preferences",
        "description": "Retrieve preferences for the authenticated user.",
        "operationId": "get_my_preferences_v1_users_me_preferences_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferencesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Preferences"
        ],
        "summary": "Update current user's preferences",
        "description": "Update preferences for the authenticated user.",
        "operationId": "update_my_preferences_v1_users_me_preferences_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreferencesUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferencesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/users/me/preferences/reset": {
      "post": {
        "tags": [
          "Preferences"
        ],
        "summary": "Reset current user's preferences",
        "description": "Reset preferences for the authenticated user.",
        "operationId": "reset_my_preferences_v1_users_me_preferences_reset_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreferencesResetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferencesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/users/{user_id}/integrations/": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "List User Integrations",
        "description": "List all integrations for a user.\n\nReturns comprehensive integration information including status, metadata,\ntoken availability, and error details with optional filtering.\n\n**Query Parameters:**\n- `provider`: Filter integrations by specific OAuth provider\n- `status`: Filter integrations by status (active, inactive, error, pending)\n- `include_token_info`: Include token expiration and availability info\n\n**Response includes:**\n- Integration details and provider information\n- OAuth scope information and external user data\n- Token metadata (expiration, availability) without actual tokens\n- Error information and health status\n- Last sync timestamps and activity",
        "operationId": "list_user_integrations_v1_users__user_id__integrations__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IntegrationProvider"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by provider",
              "title": "Provider"
            },
            "description": "Filter by provider"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IntegrationStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "include_token_info",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include token metadata",
              "default": true,
              "title": "Include Token Info"
            },
            "description": "Include token metadata"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access forbidden - insufficient permissions"
          },
          "404": {
            "description": "User or integration not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/users/{user_id}/integrations/oauth/start": {
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Start Oauth Flow",
        "description": "Start OAuth authorization flow for a provider.\n\nInitiates the OAuth 2.0 authorization code flow with PKCE security.\nReturns authorization URL that the client should redirect the user to.\n\n**Security Features:**\n- PKCE challenge/verifier generation\n- Secure state parameter with expiration\n- Scope validation and provider verification\n- User-specific encryption keys\n\n**Request Body:**\n- `provider`: OAuth provider (google, microsoft, etc.)\n- `redirect_uri`: OAuth callback URL (must be whitelisted)\n- `scopes`: Requested OAuth scopes (optional, uses defaults)\n- `state_data`: Additional data to preserve through flow\n\n**Response:**\n- `authorization_url`: URL to redirect user for authorization\n- `state`: OAuth state parameter (preserve for callback)\n- `expires_at`: State expiration time\n- `requested_scopes`: Final scope list that will be requested",
        "operationId": "start_oauth_flow_v1_users__user_id__integrations_oauth_start_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthStartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthStartResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access forbidden - insufficient permissions"
          },
          "404": {
            "description": "User or integration not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/users/{user_id}/integrations/oauth/callback": {
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Complete Oauth Flow",
        "description": "Complete OAuth authorization flow and create integration.\n\nHandles the OAuth callback with authorization code exchange, token storage,\nand integration setup. Creates or updates the user's integration record.\n\n**Security Features:**\n- State validation and anti-CSRF protection\n- Secure token storage with user-specific encryption\n- Comprehensive error handling and logging\n- Integration status tracking\n\n**Request Body:**\n- `code`: Authorization code from OAuth provider\n- `state`: OAuth state parameter from start flow\n- `error`: OAuth error code (if authorization failed)\n- `error_description`: Human-readable error description\n\n**Response:**\n- `success`: Whether OAuth flow completed successfully\n- `integration_id`: Created/updated integration ID\n- `status`: Integration status after completion\n- `scopes`: Actually granted OAuth scopes\n- `external_user_info`: User information from provider\n- `error`: Error message if flow failed",
        "operationId": "complete_oauth_flow_v1_users__user_id__integrations_oauth_callback_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider",
              "description": "OAuth provider"
            },
            "description": "OAuth provider"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthCallbackRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthCallbackResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access forbidden - insufficient permissions"
          },
          "404": {
            "description": "User or integration not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/users/{user_id}/integrations/stats": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Get Integration Statistics",
        "description": "Get comprehensive integration statistics for user.\n\nProvides analytics and metrics about all user integrations including\nstatus distribution, provider usage, error tracking, and sync activity.\n\n**Statistics Include:**\n- Total integration counts by status and provider\n- Recent error history and patterns\n- Synchronization activity and timestamps\n- Health metrics and trends\n\n**Response:**\n- Counts by status (active, error, pending, etc.)\n- Counts by provider (Google, Microsoft, etc.)\n- Recent errors with timestamps and details\n- Sync statistics and activity metrics",
        "operationId": "get_integration_statistics_v1_users__user_id__integrations_stats_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationStatsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access forbidden - insufficient permissions"
          },
          "404": {
            "description": "User or integration not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/users/{user_id}/integrations/{provider}": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Get Specific Integration",
        "description": "Get details for a specific integration.\n\nReturns detailed information about a specific provider integration\nincluding status, token info, scopes, and metadata.\n\n**Response includes:**\n- Integration status and provider information\n- Token availability and expiration details\n- OAuth scopes and external user information\n- Error details and health status\n- Last sync timestamps and activity",
        "operationId": "get_specific_integration_v1_users__user_id__integrations__provider__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access forbidden - insufficient permissions"
          },
          "404": {
            "description": "User or integration not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "Integrations"
        ],
        "summary": "Disconnect Integration",
        "description": "Disconnect an OAuth integration.\n\nRemoves the integration connection and optionally revokes tokens with\nthe provider and deletes associated data.\n\n**Request Body (optional):**\n- `revoke_tokens`: Whether to revoke tokens with provider (default: true)\n- `delete_data`: Whether to permanently delete integration data (default: false)\n\n**Response:**\n- `success`: Whether disconnection completed successfully\n- `tokens_revoked`: Whether tokens were successfully revoked\n- `data_deleted`: Whether integration data was deleted\n- `disconnected_at`: Timestamp of disconnection\n- `error`: Error message if disconnection failed",
        "operationId": "disconnect_integration_v1_users__user_id__integrations__provider__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/IntegrationDisconnectRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationDisconnectResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access forbidden - insufficient permissions"
          },
          "404": {
            "description": "User or integration not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/users/{user_id}/integrations/{provider}/refresh": {
      "put": {
        "tags": [
          "Integrations"
        ],
        "summary": "Refresh Integration Tokens",
        "description": "Refresh access tokens for an integration.\n\nManually refresh OAuth access tokens using stored refresh tokens.\nTypically used when tokens are near expiration or after API errors.\n\n**Request Body (optional):**\n- `force`: Force refresh even if token not near expiration (default: false)\n\n**Response:**\n- `success`: Whether token refresh completed successfully\n- `token_expires_at`: New token expiration time\n- `refreshed_at`: Timestamp of refresh operation\n- `error`: Error message if refresh failed",
        "operationId": "refresh_integration_tokens_v1_users__user_id__integrations__provider__refresh_put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TokenRefreshRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRefreshResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access forbidden - insufficient permissions"
          },
          "404": {
            "description": "User or integration not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/users/{user_id}/integrations/{provider}/health": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Check Integration Health",
        "description": "Check the health status of an integration.\n\nPerforms comprehensive health checks including token validity,\nconnection status, and recent activity analysis.\n\n**Health Checks:**\n- Integration status and error state\n- Token validity and expiration\n- Recent synchronization activity\n- Provider connectivity\n\n**Response:**\n- `healthy`: Overall health status boolean\n- `issues`: List of identified problems\n- `recommendations`: Suggested actions to resolve issues\n- `last_check_at`: Timestamp of health check",
        "operationId": "check_integration_health_v1_users__user_id__integrations__provider__health_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationProvider"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationHealthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Access forbidden - insufficient permissions"
          },
          "404": {
            "description": "User or integration not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/v1/integrations/providers": {
      "get": {
        "tags": [
          "Integration Providers"
        ],
        "summary": "List Oauth Providers",
        "description": "List all available OAuth providers.\n\nReturns configuration information for all supported OAuth providers\nincluding availability status, supported scopes, and default settings.\n\n**Response:**\n- Provider display names and identifiers\n- Availability status (configured and enabled)\n- Supported OAuth scopes with descriptions\n- Default scope configurations",
        "operationId": "list_oauth_providers_v1_integrations_providers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/integrations/validate-scopes": {
      "post": {
        "tags": [
          "Integration Providers"
        ],
        "summary": "Validate Oauth Scopes",
        "description": "Validate OAuth scopes for a provider.\n\nChecks requested scopes against provider configuration and returns\nvalidation results with warnings and recommendations.\n\n**Request Body:**\n- `provider`: OAuth provider to validate against\n- `scopes`: List of scope names to validate\n\n**Response:**\n- `valid_scopes`: Scopes that are supported by provider\n- `invalid_scopes`: Scopes that are not supported\n- `required_scopes`: Required scopes that will be automatically added\n- `sensitive_scopes`: Scopes that access sensitive data\n- `warnings`: Validation warnings and recommendations",
        "operationId": "validate_oauth_scopes_v1_integrations_validate_scopes_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScopeValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopeValidationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "422": {
            "description": "Validation error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/internal/tokens/get": {
      "post": {
        "tags": [
          "Internal"
        ],
        "summary": "Get User Token",
        "description": "Get a valid access token for a user and provider.\n\nThis endpoint is used by other services to retrieve tokens for API operations.",
        "operationId": "get_user_token_v1_internal_tokens_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InternalTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalTokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/tokens/refresh": {
      "post": {
        "tags": [
          "Internal"
        ],
        "summary": "Refresh User Tokens",
        "description": "Refresh user tokens for other services.\n\nManually refresh OAuth access tokens using stored refresh tokens.\nUseful for recovering from token expiration or API errors.\n\n**Authentication:**\n- Requires service-to-service API key authentication\n- Only authorized services can refresh user tokens\n\n**Request Body:**\n- `user_id`: User identifier\n- `provider`: OAuth provider (google, microsoft, etc.)\n- `force`: Force refresh even if not near expiration (default: false)\n\n**Response:**\n- `success`: Whether token refresh succeeded\n- `access_token`: New OAuth access token (if successful)\n- `refresh_token`: Refresh token (if available)\n- `expires_at`: New token expiration time\n- `error`: Error message (if failed)\n\n**Features:**\n- Uses stored refresh tokens for token exchange\n- Updates token records with new expiration times\n- Comprehensive error handling and logging\n- Returns updated token information",
        "operationId": "refresh_user_tokens_v1_internal_tokens_refresh_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InternalTokenRefreshRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalTokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/users/{user_id}/status": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Get User Status",
        "description": "Get user integration status for other services.\n\nProvides comprehensive integration status information including\nactive integrations, error states, and provider availability.\n\n**Authentication:**\n- Requires service-to-service API key authentication\n- Only authorized services can retrieve user status\n\n**Path Parameters:**\n- `user_id`: User identifier\n\n**Response:**\n- `user_id`: User identifier\n- `active_integrations`: Number of active integrations\n- `total_integrations`: Total number of integrations\n- `providers`: List of available providers\n- `has_errors`: Whether any integrations have errors\n- `last_sync_at`: Last successful sync time\n\n**Use Cases:**\n- Check user integration health before making API calls\n- Determine available OAuth providers for a user\n- Monitor integration error states\n- Track sync activity across services",
        "operationId": "get_user_status_v1_internal_users__user_id__status_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalUserStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/users/by-external-id/{external_auth_id}": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Get User By External Auth Id",
        "description": "Get user information by external_auth_id (internal service endpoint).\n\nThis endpoint always returns 200 with user information or null,\navoiding 404 logs for missing users.\n\nReturns:\n    User data if found, or {\"exists\": false} if not found",
        "operationId": "get_user_by_external_auth_id_v1_internal_users_by_external_id__external_auth_id__get",
        "parameters": [
          {
            "name": "external_auth_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "External Auth Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get User By External Auth Id V1 Internal Users By External Id  External Auth Id  Get"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/users/exists": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Check User Exists",
        "description": "Check if a user exists by email (primary endpoint for user existence checks).\n\nThis endpoint always returns 200 with a detailed response,\navoiding 404 logs for missing users. Use this instead of GET /users/id\nwhen you only need to check existence.\n\nReturns:\n    {\"exists\": true/false, \"user_id\": \"id_if_exists\", \"provider\": \"provider_if_exists\"}",
        "operationId": "check_user_exists_v1_internal_users_exists_get",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Email address to check",
              "title": "Email"
            },
            "description": "Email address to check"
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "OAuth provider (google, microsoft, etc.)",
              "title": "Provider"
            },
            "description": "OAuth provider (google, microsoft, etc.)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Check User Exists V1 Internal Users Exists Get"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/users/id": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Get User By Email Internal",
        "description": "Get user by exact email lookup (internal service endpoint).\n\n\u26a0\ufe0f  DEPRECATED: Use GET /v1/internal/users/exists instead to avoid 404 error logs.\nThis endpoint will be removed in a future version.\n\nThis endpoint provides a clean RESTful way to find users by email address\nwithout exposing internal email normalization implementation details.\nPerfect for NextAuth integration where you need to check user existence\nbefore deciding whether to create a new user.\n\n**Authentication:**\n- Requires service-to-service API key authentication\n- Only authorized services (frontend, chat, office) can lookup users\n- Never accepts user JWTs\n\nArgs:\n    email: Email address to lookup\n    provider: OAuth provider for context (optional)\n\nReturns:\n    UserResponse if user found\n\nRaises:\n    404: If no user found for the email\n    422: If email format is invalid",
        "operationId": "get_user_by_email_internal_v1_internal_users_id_get",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Email address to lookup",
              "title": "Email"
            },
            "description": "Email address to lookup"
          },
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "OAuth provider (google, microsoft, etc.)",
              "title": "Provider"
            },
            "description": "OAuth provider (google, microsoft, etc.)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/users/": {
      "post": {
        "tags": [
          "Internal"
        ],
        "summary": "Create Or Upsert User Internal",
        "description": "Create a new user or return existing user by external_auth_id and auth_provider (internal service endpoint).\n\nThis is a protected endpoint designed for OAuth/NextAuth flows where\nwe want to create users if they don't exist, or return existing\nusers if they do. Requires service authentication (API key).\n\n**Authentication:**\n- Requires service-to-service API key authentication\n- Only authorized services (frontend, chat, office) can create users\n- Never accepts user JWTs\n\n**Response Status Codes:**\n- 200 (OK): Existing user found and returned\n- 201 (Created): New user created successfully\n- 409 (Conflict): Email collision detected\n- 422 (Validation Error): Invalid request data\n- 500 (Internal Server Error): Unexpected error",
        "operationId": "create_or_upsert_user_internal_v1_internal_users__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/users/{user_id}/preferences": {
      "put": {
        "tags": [
          "Internal"
        ],
        "summary": "Update User Preferences Internal",
        "description": "Internal service endpoint to update user preferences by user_id.\nRequires service-to-service API key authentication.",
        "operationId": "update_user_preferences_internal_v1_internal_users__user_id__preferences_put",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreferencesUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferencesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Get User Preferences Internal",
        "description": "Get user preferences for other services.\n\nInternal service endpoint to retrieve user preferences with service authentication.\nUsed by chat service and other internal services to get user timezone and settings.\n\n**Authentication:**\n- Requires service-to-service API key authentication\n- Only authorized services can retrieve user preferences\n\n**Path Parameters:**\n- `user_id`: User identifier (external auth ID)\n\n**Response:**\n- User preferences object or null if not found\n- Returns 404 if user not found (normal for new users)\n\n**Use Cases:**\n- Chat service getting user timezone for scheduling\n- Office service getting user notification preferences\n- Any service needing user settings for personalization",
        "operationId": "get_user_preferences_internal_v1_internal_users__user_id__preferences_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get User Preferences Internal V1 Internal Users  User Id  Preferences Get"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/users/{user_id}/preferences/reset": {
      "post": {
        "tags": [
          "Internal"
        ],
        "summary": "Reset User Preferences Internal",
        "description": "Internal service endpoint to reset user preferences by user_id.\nRequires service-to-service API key authentication.",
        "operationId": "reset_user_preferences_internal_v1_internal_users__user_id__preferences_reset_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreferencesResetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferencesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/users/{user_id}/integrations": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Get User Integrations Internal",
        "description": "Get user integrations for other services.\n\nInternal service endpoint to retrieve user integrations with service authentication.\nUsed by chat service and other internal services to determine available providers.\n\n**Authentication:**\n- Requires service-to-service API key authentication\n- Only authorized services can retrieve user integrations\n\n**Path Parameters:**\n- `user_id`: User identifier (external auth ID)\n\n**Response:**\n- List of user integrations with status and provider information\n- Returns empty list if user not found or no integrations\n\n**Use Cases:**\n- Chat service determining available calendar providers\n- Office service checking user's connected accounts\n- Any service needing to know user's OAuth connections",
        "operationId": "get_user_integrations_internal_v1_internal_users__user_id__integrations_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get User Integrations Internal V1 Internal Users  User Id  Integrations Get"
                }
              }
            }
          },
          "401": {
            "description": "Service authentication required"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/callback": {
      "get": {
        "summary": "Oauth Callback Redirect",
        "description": "Global OAuth callback endpoint that handles provider redirects.\n\nThis endpoint receives OAuth callbacks from providers and processes them\ndirectly using the integration service.\n\nThe state parameter contains information about the user and provider\nthat allows us to route the callback correctly.",
        "operationId": "oauth_callback_redirect_oauth_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Code"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          },
          {
            "name": "error",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error"
            }
          },
          {
            "name": "error_description",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error Description"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Oauth Callback Redirect Oauth Callback Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Service health check",
        "description": "Basic health check for load balancer liveness probes",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Service is healthy and ready to handle requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadinessStatus"
                },
                "example": {
                  "status": "healthy",
                  "service": "user",
                  "version": "0.1.0",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "environment": "production",
                  "checks": {
                    "database": {
                      "status": "healthy",
                      "response_time_ms": 5.2,
                      "connected": true
                    },
                    "configuration": {
                      "status": "healthy",
                      "issues": []
                    },
                    "dependencies": {
                      "status": "healthy",
                      "services": {
                        "encryption_service": true,
                        "audit_logging": true
                      }
                    }
                  },
                  "performance": {
                    "total_check_time_ms": 12.5
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy and should not receive traffic",
            "content": {
              "application/json": {
                "example": {
                  "status": "unhealthy",
                  "service": "user",
                  "version": "0.1.0",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "environment": "production",
                  "checks": {
                    "database": {
                      "status": "unhealthy",
                      "connected": false,
                      "error": "Database unavailable"
                    },
                    "configuration": {
                      "status": "unhealthy",
                      "issues": [
                        "DB_URL_USER not configured"
                      ]
                    },
                    "dependencies": {
                      "status": "unhealthy",
                      "services": {
                        "encryption_service": false,
                        "audit_logging": false
                      }
                    }
                  },
                  "performance": {
                    "total_check_time_ms": 0.0
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ready": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Service readiness check",
        "description": "Comprehensive readiness check for load balancer readiness probes",
        "operationId": "readiness_check_ready_get",
        "responses": {
          "200": {
            "description": "Service is ready to handle requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadinessStatus"
                },
                "example": {
                  "status": "ready",
                  "service": "user",
                  "version": "0.1.0",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "environment": "production",
                  "checks": {
                    "database": {
                      "status": "ready",
                      "response_time_ms": 5.2,
                      "connected": true
                    },
                    "configuration": {
                      "status": "ready",
                      "issues": []
                    },
                    "dependencies": {
                      "status": "ready",
                      "services": {
                        "encryption_service": true,
                        "audit_logging": true
                      }
                    }
                  },
                  "performance": {
                    "total_check_time_ms": 12.5
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is not ready to handle requests",
            "content": {
              "application/json": {
                "example": {
                  "status": "not_ready",
                  "service": "user",
                  "version": "0.1.0",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "environment": "production",
                  "checks": {
                    "database": {
                      "status": "not_ready",
                      "connected": false,
                      "error": "Database not connected"
                    },
                    "configuration": {
                      "status": "not_ready",
                      "issues": [
                        "DB_URL_USER not configured"
                      ]
                    },
                    "dependencies": {
                      "status": "not_ready",
                      "services": {
                        "encryption_service": false,
                        "audit_logging": false
                      }
                    }
                  },
                  "performance": {
                    "total_check_time_ms": 0.0
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AIModelProvider": {
        "type": "string",
        "enum": [
          "openai",
          "anthropic",
          "google",
          "azure"
        ],
        "title": "AIModelProvider",
        "description": "AI model provider options."
      },
      "AIModelType": {
        "type": "string",
        "enum": [
          "gpt-4",
          "gpt-3.5-turbo",
          "claude-3-opus",
          "claude-3-sonnet",
          "claude-3-haiku",
          "gemini-pro"
        ],
        "title": "AIModelType",
        "description": "AI model type options."
      },
      "AIPreferencesSchema": {
        "properties": {
          "preferred_provider": {
            "$ref": "#/components/schemas/AIModelProvider",
            "description": "Preferred AI provider",
            "default": "openai"
          },
          "preferred_model": {
            "$ref": "#/components/schemas/AIModelType",
            "description": "Preferred AI model",
            "default": "gpt-4"
          },
          "response_style": {
            "type": "string",
            "title": "Response Style",
            "description": "AI response style preference",
            "default": "balanced"
          },
          "response_length": {
            "type": "string",
            "title": "Response Length",
            "description": "Preferred response length",
            "default": "medium"
          },
          "auto_summarization": {
            "type": "boolean",
            "title": "Auto Summarization",
            "description": "Enable automatic summarization",
            "default": true
          },
          "smart_suggestions": {
            "type": "boolean",
            "title": "Smart Suggestions",
            "description": "Enable smart suggestions",
            "default": true
          },
          "context_awareness": {
            "type": "boolean",
            "title": "Context Awareness",
            "description": "Enable context-aware responses",
            "default": true
          },
          "temperature": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "AI creativity/randomness level",
            "default": 0.7
          },
          "max_tokens": {
            "type": "integer",
            "maximum": 8000.0,
            "minimum": 100.0,
            "title": "Max Tokens",
            "description": "Maximum tokens per response",
            "default": 2000
          }
        },
        "type": "object",
        "title": "AIPreferencesSchema",
        "description": "AI preferences schema.",
        "example": {
          "auto_summarization": true,
          "context_awareness": true,
          "max_tokens": 2000,
          "preferred_model": "gpt-4",
          "preferred_provider": "openai",
          "response_length": "medium",
          "response_style": "balanced",
          "smart_suggestions": true,
          "temperature": 0.7
        }
      },
      "ConfigurationStatus": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "issues": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Issues"
          }
        },
        "type": "object",
        "required": [
          "status",
          "issues"
        ],
        "title": "ConfigurationStatus"
      },
      "DataRetentionPeriod": {
        "type": "string",
        "enum": [
          "30_days",
          "90_days",
          "180_days",
          "1_year",
          "2_years",
          "indefinite"
        ],
        "title": "DataRetentionPeriod",
        "description": "Data retention period options."
      },
      "DatabaseStatus": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "response_time_ms": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Time Ms"
          },
          "connected": {
            "type": "boolean",
            "title": "Connected"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "required": [
          "status",
          "connected"
        ],
        "title": "DatabaseStatus"
      },
      "DateFormat": {
        "type": "string",
        "enum": [
          "MM/DD/YYYY",
          "DD/MM/YYYY",
          "YYYY-MM-DD"
        ],
        "title": "DateFormat",
        "description": "Date format options."
      },
      "DependencyStatus": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "services": {
            "additionalProperties": {
              "type": "boolean"
            },
            "type": "object",
            "title": "Services"
          }
        },
        "type": "object",
        "required": [
          "status",
          "services"
        ],
        "title": "DependencyStatus"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IntegrationDisconnectRequest": {
        "properties": {
          "revoke_tokens": {
            "type": "boolean",
            "title": "Revoke Tokens",
            "description": "Whether to revoke tokens with provider",
            "default": true
          },
          "delete_data": {
            "type": "boolean",
            "title": "Delete Data",
            "description": "Whether to delete associated user data",
            "default": false
          }
        },
        "type": "object",
        "title": "IntegrationDisconnectRequest",
        "description": "Request model for disconnecting integration."
      },
      "IntegrationDisconnectResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether disconnection succeeded"
          },
          "integration_id": {
            "type": "integer",
            "title": "Integration Id",
            "description": "Integration ID"
          },
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "tokens_revoked": {
            "type": "boolean",
            "title": "Tokens Revoked",
            "description": "Whether tokens were revoked"
          },
          "data_deleted": {
            "type": "boolean",
            "title": "Data Deleted",
            "description": "Whether associated data was deleted"
          },
          "disconnected_at": {
            "type": "string",
            "format": "date-time",
            "title": "Disconnected At",
            "description": "Disconnection time"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if failed"
          }
        },
        "type": "object",
        "required": [
          "success",
          "integration_id",
          "provider",
          "tokens_revoked",
          "data_deleted",
          "disconnected_at"
        ],
        "title": "IntegrationDisconnectResponse",
        "description": "Response model for integration disconnection."
      },
      "IntegrationHealthResponse": {
        "properties": {
          "integration_id": {
            "type": "integer",
            "title": "Integration Id",
            "description": "Integration ID"
          },
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "status": {
            "$ref": "#/components/schemas/IntegrationStatus",
            "description": "Integration status"
          },
          "healthy": {
            "type": "boolean",
            "title": "Healthy",
            "description": "Whether integration is healthy"
          },
          "last_check_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Check At",
            "description": "Last health check time"
          },
          "issues": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Issues",
            "description": "List of health issues"
          },
          "recommendations": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Recommendations",
            "description": "Recommended actions"
          }
        },
        "type": "object",
        "required": [
          "integration_id",
          "provider",
          "status",
          "healthy",
          "last_check_at"
        ],
        "title": "IntegrationHealthResponse",
        "description": "Response model for integration health check."
      },
      "IntegrationListResponse": {
        "properties": {
          "integrations": {
            "items": {
              "$ref": "#/components/schemas/IntegrationResponse"
            },
            "type": "array",
            "title": "Integrations",
            "description": "List of user integrations"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of integrations"
          },
          "active_count": {
            "type": "integer",
            "title": "Active Count",
            "description": "Number of active integrations"
          },
          "error_count": {
            "type": "integer",
            "title": "Error Count",
            "description": "Number of integrations with errors"
          }
        },
        "type": "object",
        "required": [
          "total",
          "active_count",
          "error_count"
        ],
        "title": "IntegrationListResponse",
        "description": "Response model for listing user integrations."
      },
      "IntegrationPreferencesSchema": {
        "properties": {
          "auto_sync": {
            "type": "boolean",
            "title": "Auto Sync",
            "description": "Enable automatic synchronization",
            "default": true
          },
          "sync_frequency": {
            "type": "integer",
            "maximum": 1440.0,
            "minimum": 5.0,
            "title": "Sync Frequency",
            "description": "Sync frequency in minutes",
            "default": 30
          },
          "google_drive_enabled": {
            "type": "boolean",
            "title": "Google Drive Enabled",
            "description": "Enable Google Drive integration",
            "default": false
          },
          "microsoft_365_enabled": {
            "type": "boolean",
            "title": "Microsoft 365 Enabled",
            "description": "Enable Microsoft 365 integration",
            "default": false
          },
          "dropbox_enabled": {
            "type": "boolean",
            "title": "Dropbox Enabled",
            "description": "Enable Dropbox integration",
            "default": false
          },
          "sync_document_content": {
            "type": "boolean",
            "title": "Sync Document Content",
            "description": "Sync document content",
            "default": true
          },
          "sync_metadata": {
            "type": "boolean",
            "title": "Sync Metadata",
            "description": "Sync file metadata",
            "default": true
          },
          "sync_permissions": {
            "type": "boolean",
            "title": "Sync Permissions",
            "description": "Sync file permissions",
            "default": false
          },
          "conflict_resolution": {
            "type": "string",
            "title": "Conflict Resolution",
            "description": "How to handle sync conflicts",
            "default": "prompt"
          }
        },
        "type": "object",
        "title": "IntegrationPreferencesSchema",
        "description": "Integration preferences schema.",
        "example": {
          "auto_sync": true,
          "conflict_resolution": "prompt",
          "dropbox_enabled": false,
          "google_drive_enabled": true,
          "microsoft_365_enabled": false,
          "sync_document_content": true,
          "sync_frequency": 30,
          "sync_metadata": true,
          "sync_permissions": false
        }
      },
      "IntegrationProvider": {
        "type": "string",
        "enum": [
          "google",
          "microsoft",
          "slack"
        ],
        "title": "IntegrationProvider",
        "description": "Supported OAuth integration providers."
      },
      "IntegrationProviderInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Provider display name"
          },
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "Provider identifier"
          },
          "available": {
            "type": "boolean",
            "title": "Available",
            "description": "Whether provider is configured and available"
          },
          "supported_scopes": {
            "items": {
              "$ref": "#/components/schemas/IntegrationScopeResponse"
            },
            "type": "array",
            "title": "Supported Scopes",
            "description": "Available scopes for this provider"
          },
          "default_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Default Scopes",
            "description": "Default scopes requested"
          }
        },
        "type": "object",
        "required": [
          "name",
          "provider",
          "available"
        ],
        "title": "IntegrationProviderInfo",
        "description": "Information about an OAuth provider."
      },
      "IntegrationResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Integration ID"
          },
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "status": {
            "$ref": "#/components/schemas/IntegrationStatus",
            "description": "Integration status"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Scopes",
            "description": "Granted OAuth scopes"
          },
          "external_user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External User Id",
            "description": "User ID from external provider"
          },
          "external_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Email",
            "description": "Email from external provider"
          },
          "external_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Name",
            "description": "Display name from external provider"
          },
          "has_access_token": {
            "type": "boolean",
            "title": "Has Access Token",
            "description": "Whether access token is available"
          },
          "has_refresh_token": {
            "type": "boolean",
            "title": "Has Refresh Token",
            "description": "Whether refresh token is available"
          },
          "token_expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Expires At",
            "description": "Access token expiration"
          },
          "token_created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Created At",
            "description": "Token creation time"
          },
          "last_sync_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Sync At",
            "description": "Last successful sync"
          },
          "last_error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Error",
            "description": "Last error message if any"
          },
          "error_count": {
            "type": "integer",
            "title": "Error Count",
            "description": "Consecutive error count",
            "default": 0
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Integration creation time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update time"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "provider",
          "status",
          "has_access_token",
          "has_refresh_token",
          "created_at",
          "updated_at"
        ],
        "title": "IntegrationResponse",
        "description": "Response model for user integration."
      },
      "IntegrationScopeResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Scope name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Human-readable scope description"
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "description": "Whether scope is required"
          },
          "sensitive": {
            "type": "boolean",
            "title": "Sensitive",
            "description": "Whether scope accesses sensitive data"
          },
          "granted": {
            "type": "boolean",
            "title": "Granted",
            "description": "Whether user has granted this scope"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "required",
          "sensitive",
          "granted"
        ],
        "title": "IntegrationScopeResponse",
        "description": "Response model for OAuth scope information."
      },
      "IntegrationStatsResponse": {
        "properties": {
          "total_integrations": {
            "type": "integer",
            "title": "Total Integrations",
            "description": "Total integrations"
          },
          "active_integrations": {
            "type": "integer",
            "title": "Active Integrations",
            "description": "Active integrations"
          },
          "failed_integrations": {
            "type": "integer",
            "title": "Failed Integrations",
            "description": "Failed integrations"
          },
          "pending_integrations": {
            "type": "integer",
            "title": "Pending Integrations",
            "description": "Pending integrations"
          },
          "by_provider": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "By Provider",
            "description": "Integration counts by provider"
          },
          "by_status": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "By Status",
            "description": "Integration counts by status"
          },
          "recent_errors": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Recent Errors",
            "description": "Recent integration errors"
          },
          "sync_stats": {
            "additionalProperties": true,
            "type": "object",
            "title": "Sync Stats",
            "description": "Synchronization statistics"
          }
        },
        "type": "object",
        "required": [
          "total_integrations",
          "active_integrations",
          "failed_integrations",
          "pending_integrations"
        ],
        "title": "IntegrationStatsResponse",
        "description": "Response model for integration statistics."
      },
      "IntegrationStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "INACTIVE",
          "ERROR",
          "PENDING",
          "EXPIRED"
        ],
        "title": "IntegrationStatus",
        "description": "Integration connection status."
      },
      "InternalTokenRefreshRequest": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID to refresh tokens for"
          },
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "force": {
            "type": "boolean",
            "title": "Force",
            "description": "Force refresh even if not near expiration",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "provider"
        ],
        "title": "InternalTokenRefreshRequest",
        "description": "Request model for internal token refresh."
      },
      "InternalTokenRequest": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID to retrieve tokens for"
          },
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "required_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Required Scopes",
            "description": "Required OAuth scopes"
          },
          "refresh_if_needed": {
            "type": "boolean",
            "title": "Refresh If Needed",
            "description": "Automatically refresh if token is near expiration",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "provider"
        ],
        "title": "InternalTokenRequest",
        "description": "Request model for internal token retrieval."
      },
      "InternalTokenResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether token retrieval succeeded"
          },
          "access_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Token",
            "description": "OAuth access token"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token",
            "description": "OAuth refresh token"
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At",
            "description": "Token expiration time"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Scopes",
            "description": "Granted scopes"
          },
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "integration_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Integration Id",
            "description": "Integration ID"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "Token type",
            "default": "Bearer"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if failed"
          }
        },
        "type": "object",
        "required": [
          "success",
          "provider",
          "user_id"
        ],
        "title": "InternalTokenResponse",
        "description": "Response model for internal token retrieval."
      },
      "InternalUserStatusResponse": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "active_integrations": {
            "type": "integer",
            "title": "Active Integrations",
            "description": "Number of active integrations"
          },
          "total_integrations": {
            "type": "integer",
            "title": "Total Integrations",
            "description": "Total number of integrations"
          },
          "providers": {
            "items": {
              "$ref": "#/components/schemas/IntegrationProvider"
            },
            "type": "array",
            "title": "Providers",
            "description": "Available providers"
          },
          "has_errors": {
            "type": "boolean",
            "title": "Has Errors",
            "description": "Whether any integrations have errors"
          },
          "last_sync_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Sync At",
            "description": "Last successful sync across all integrations"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "active_integrations",
          "total_integrations",
          "has_errors"
        ],
        "title": "InternalUserStatusResponse",
        "description": "Response model for internal user status retrieval."
      },
      "Language": {
        "type": "string",
        "enum": [
          "en",
          "es",
          "fr",
          "de",
          "it",
          "pt",
          "ja",
          "ko",
          "zh"
        ],
        "title": "Language",
        "description": "Supported languages."
      },
      "NotificationFrequency": {
        "type": "string",
        "enum": [
          "immediate",
          "hourly",
          "daily",
          "weekly",
          "never"
        ],
        "title": "NotificationFrequency",
        "description": "Notification frequency options."
      },
      "NotificationPreferencesSchema": {
        "properties": {
          "email_notifications": {
            "type": "boolean",
            "title": "Email Notifications",
            "description": "Enable email notifications",
            "default": true
          },
          "push_notifications": {
            "type": "boolean",
            "title": "Push Notifications",
            "description": "Enable push notifications",
            "default": true
          },
          "sms_notifications": {
            "type": "boolean",
            "title": "Sms Notifications",
            "description": "Enable SMS notifications",
            "default": false
          },
          "summary_frequency": {
            "$ref": "#/components/schemas/NotificationFrequency",
            "description": "Frequency for summary notifications",
            "default": "daily"
          },
          "activity_frequency": {
            "$ref": "#/components/schemas/NotificationFrequency",
            "description": "Frequency for activity notifications",
            "default": "immediate"
          },
          "document_updates": {
            "type": "boolean",
            "title": "Document Updates",
            "description": "Notify on document updates",
            "default": true
          },
          "system_updates": {
            "type": "boolean",
            "title": "System Updates",
            "description": "Notify on system updates",
            "default": true
          },
          "security_alerts": {
            "type": "boolean",
            "title": "Security Alerts",
            "description": "Notify on security alerts",
            "default": true
          },
          "integration_status": {
            "type": "boolean",
            "title": "Integration Status",
            "description": "Notify on integration status changes",
            "default": true
          },
          "quiet_hours_enabled": {
            "type": "boolean",
            "title": "Quiet Hours Enabled",
            "description": "Enable quiet hours",
            "default": false
          },
          "quiet_hours_start": {
            "type": "string",
            "title": "Quiet Hours Start",
            "description": "Quiet hours start time (HH:MM)",
            "default": "22:00"
          },
          "quiet_hours_end": {
            "type": "string",
            "title": "Quiet Hours End",
            "description": "Quiet hours end time (HH:MM)",
            "default": "08:00"
          }
        },
        "type": "object",
        "title": "NotificationPreferencesSchema",
        "description": "Notification preferences schema.",
        "example": {
          "activity_frequency": "immediate",
          "document_updates": true,
          "email_notifications": true,
          "integration_status": true,
          "push_notifications": true,
          "quiet_hours_enabled": true,
          "quiet_hours_end": "08:00",
          "quiet_hours_start": "22:00",
          "security_alerts": true,
          "sms_notifications": false,
          "summary_frequency": "daily",
          "system_updates": true
        }
      },
      "OAuthCallbackRequest": {
        "properties": {
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code",
            "description": "OAuth authorization code"
          },
          "state": {
            "type": "string",
            "title": "State",
            "description": "OAuth state parameter"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "OAuth error if any"
          },
          "error_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Description",
            "description": "OAuth error description"
          }
        },
        "type": "object",
        "required": [
          "state"
        ],
        "title": "OAuthCallbackRequest",
        "description": "Request model for OAuth callback handling."
      },
      "OAuthCallbackResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether OAuth flow completed successfully"
          },
          "integration_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Integration Id",
            "description": "Created/updated integration ID"
          },
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "status": {
            "$ref": "#/components/schemas/IntegrationStatus",
            "description": "Integration status"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Scopes",
            "description": "Granted scopes"
          },
          "external_user_info": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "External User Info",
            "description": "User info from external provider"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if failed"
          }
        },
        "type": "object",
        "required": [
          "success",
          "provider",
          "status"
        ],
        "title": "OAuthCallbackResponse",
        "description": "Response model for OAuth callback completion."
      },
      "OAuthStartRequest": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "redirect_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Uri",
            "description": "OAuth callback redirect URI (uses default if not provided)"
          },
          "scopes": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scopes",
            "description": "Requested OAuth scopes (uses defaults if not provided)"
          },
          "state_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "State Data",
            "description": "Additional state data to preserve through OAuth flow"
          }
        },
        "type": "object",
        "required": [
          "provider"
        ],
        "title": "OAuthStartRequest",
        "description": "Request model for starting OAuth flow."
      },
      "OAuthStartResponse": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "authorization_url": {
            "type": "string",
            "title": "Authorization Url",
            "description": "OAuth authorization URL"
          },
          "state": {
            "type": "string",
            "title": "State",
            "description": "OAuth state parameter"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "State expiration time"
          },
          "requested_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Requested Scopes",
            "description": "Scopes that will be requested"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "authorization_url",
          "state",
          "expires_at"
        ],
        "title": "OAuthStartResponse",
        "description": "Response model for OAuth flow initiation."
      },
      "PerformanceStatus": {
        "properties": {
          "total_check_time_ms": {
            "type": "number",
            "title": "Total Check Time Ms"
          }
        },
        "type": "object",
        "required": [
          "total_check_time_ms"
        ],
        "title": "PerformanceStatus"
      },
      "PreferencesResetRequest": {
        "properties": {
          "categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Categories",
            "description": "Categories to reset (if None, reset all)"
          }
        },
        "type": "object",
        "title": "PreferencesResetRequest",
        "description": "Preferences reset request schema.",
        "example": {
          "categories": [
            "ui",
            "notifications"
          ]
        }
      },
      "PrivacyPreferencesSchema": {
        "properties": {
          "data_collection": {
            "type": "boolean",
            "title": "Data Collection",
            "description": "Allow data collection for improvements",
            "default": true
          },
          "analytics": {
            "type": "boolean",
            "title": "Analytics",
            "description": "Allow analytics tracking",
            "default": true
          },
          "personalization": {
            "type": "boolean",
            "title": "Personalization",
            "description": "Allow personalization based on usage",
            "default": true
          },
          "data_retention_period": {
            "$ref": "#/components/schemas/DataRetentionPeriod",
            "description": "Data retention period",
            "default": "1_year"
          },
          "share_anonymous_usage": {
            "type": "boolean",
            "title": "Share Anonymous Usage",
            "description": "Share anonymous usage statistics",
            "default": false
          },
          "marketing_communications": {
            "type": "boolean",
            "title": "Marketing Communications",
            "description": "Receive marketing communications",
            "default": false
          },
          "secure_deletion": {
            "type": "boolean",
            "title": "Secure Deletion",
            "description": "Use secure deletion methods",
            "default": true
          },
          "encrypt_sensitive_data": {
            "type": "boolean",
            "title": "Encrypt Sensitive Data",
            "description": "Encrypt sensitive data",
            "default": true
          },
          "shipment_data_collection": {
            "type": "boolean",
            "title": "Shipment Data Collection",
            "description": "Allow collection of shipment data for service improvements",
            "default": true
          }
        },
        "type": "object",
        "title": "PrivacyPreferencesSchema",
        "description": "Privacy preferences schema.",
        "example": {
          "analytics": true,
          "data_collection": true,
          "data_retention_period": "1_year",
          "encrypt_sensitive_data": true,
          "marketing_communications": false,
          "personalization": true,
          "secure_deletion": true,
          "share_anonymous_usage": false
        }
      },
      "ProviderListResponse": {
        "properties": {
          "providers": {
            "items": {
              "$ref": "#/components/schemas/IntegrationProviderInfo"
            },
            "type": "array",
            "title": "Providers",
            "description": "Available OAuth providers"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of providers"
          },
          "available_count": {
            "type": "integer",
            "title": "Available Count",
            "description": "Number of available providers"
          }
        },
        "type": "object",
        "required": [
          "total",
          "available_count"
        ],
        "title": "ProviderListResponse",
        "description": "Response model for listing available OAuth providers."
      },
      "ReadinessChecks": {
        "properties": {
          "database": {
            "$ref": "#/components/schemas/DatabaseStatus"
          },
          "configuration": {
            "$ref": "#/components/schemas/ConfigurationStatus"
          },
          "dependencies": {
            "$ref": "#/components/schemas/DependencyStatus"
          }
        },
        "type": "object",
        "required": [
          "database",
          "configuration",
          "dependencies"
        ],
        "title": "ReadinessChecks"
      },
      "ReadinessStatus": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "service": {
            "type": "string",
            "title": "Service"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          },
          "environment": {
            "type": "string",
            "title": "Environment"
          },
          "checks": {
            "$ref": "#/components/schemas/ReadinessChecks"
          },
          "performance": {
            "$ref": "#/components/schemas/PerformanceStatus"
          }
        },
        "type": "object",
        "required": [
          "status",
          "service",
          "version",
          "timestamp",
          "environment",
          "checks",
          "performance"
        ],
        "title": "ReadinessStatus"
      },
      "ScopeValidationRequest": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Scopes",
            "description": "Scopes to validate"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "scopes"
        ],
        "title": "ScopeValidationRequest",
        "description": "Request model for validating OAuth scopes."
      },
      "ScopeValidationResponse": {
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "requested_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Requested Scopes",
            "description": "Requested scopes"
          },
          "valid_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Valid Scopes",
            "description": "Valid scopes for provider"
          },
          "invalid_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Invalid Scopes",
            "description": "Invalid scopes"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings",
            "description": "Scope validation warnings"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "requested_scopes",
          "valid_scopes"
        ],
        "title": "ScopeValidationResponse",
        "description": "Response model for OAuth scope validation."
      },
      "ThemeMode": {
        "type": "string",
        "enum": [
          "light",
          "dark",
          "system"
        ],
        "title": "ThemeMode",
        "description": "Theme mode options."
      },
      "TimeFormat": {
        "type": "string",
        "enum": [
          "12h",
          "24h"
        ],
        "title": "TimeFormat",
        "description": "Time format options."
      },
      "TokenRefreshRequest": {
        "properties": {
          "force": {
            "type": "boolean",
            "title": "Force",
            "description": "Force refresh even if token is not near expiration",
            "default": false
          }
        },
        "type": "object",
        "title": "TokenRefreshRequest",
        "description": "Request model for manual token refresh."
      },
      "TokenRefreshResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether token refresh succeeded"
          },
          "integration_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Integration Id",
            "description": "Integration ID"
          },
          "provider": {
            "$ref": "#/components/schemas/IntegrationProvider",
            "description": "OAuth provider"
          },
          "token_expires_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Expires At",
            "description": "New token expiration time"
          },
          "refreshed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refreshed At",
            "description": "Refresh completion time"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if failed"
          }
        },
        "type": "object",
        "required": [
          "success",
          "provider"
        ],
        "title": "TokenRefreshResponse",
        "description": "Response model for token refresh operation."
      },
      "UIPreferencesSchema": {
        "properties": {
          "theme": {
            "$ref": "#/components/schemas/ThemeMode",
            "description": "Theme mode preference",
            "default": "system"
          },
          "language": {
            "$ref": "#/components/schemas/Language",
            "description": "Display language",
            "default": "en"
          },
          "date_format": {
            "$ref": "#/components/schemas/DateFormat",
            "description": "Date format preference",
            "default": "MM/DD/YYYY"
          },
          "time_format": {
            "$ref": "#/components/schemas/TimeFormat",
            "description": "Time format preference",
            "default": "12h"
          },
          "compact_mode": {
            "type": "boolean",
            "title": "Compact Mode",
            "description": "Use compact UI layout",
            "default": false
          },
          "show_tooltips": {
            "type": "boolean",
            "title": "Show Tooltips",
            "description": "Show helpful tooltips",
            "default": true
          },
          "animations_enabled": {
            "type": "boolean",
            "title": "Animations Enabled",
            "description": "Enable UI animations",
            "default": true
          },
          "sidebar_expanded": {
            "type": "boolean",
            "title": "Sidebar Expanded",
            "description": "Keep sidebar expanded by default",
            "default": false
          }
        },
        "type": "object",
        "title": "UIPreferencesSchema",
        "description": "UI preferences schema.",
        "example": {
          "animations_enabled": true,
          "compact_mode": false,
          "date_format": "MM/DD/YYYY",
          "language": "en",
          "show_tooltips": true,
          "sidebar_expanded": false,
          "theme": "dark",
          "time_format": "12h"
        }
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "User's email address"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name",
            "description": "User's first name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name",
            "description": "User's last name"
          },
          "profile_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Image Url",
            "description": "URL to user's profile image"
          },
          "external_auth_id": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "External Auth Id",
            "description": "External authentication provider user ID"
          },
          "auth_provider": {
            "type": "string",
            "maxLength": 50,
            "title": "Auth Provider",
            "description": "Authentication provider name",
            "default": "nextauth"
          },
          "preferred_provider": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 50
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Provider",
            "description": "Preferred integration provider (google or microsoft)"
          }
        },
        "type": "object",
        "required": [
          "email",
          "external_auth_id"
        ],
        "title": "UserCreate",
        "description": "Schema for creating a new user."
      },
      "UserCreateResponse": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "created": {
            "type": "boolean",
            "title": "Created"
          }
        },
        "type": "object",
        "required": [
          "user",
          "created"
        ],
        "title": "UserCreateResponse",
        "description": "Response model for user creation/upsert with creation status."
      },
      "UserListResponse": {
        "properties": {
          "users": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Users",
            "description": "List of users"
          },
          "next_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Cursor",
            "description": "Cursor token for next page"
          },
          "prev_cursor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prev Cursor",
            "description": "Cursor token for previous page"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next",
            "description": "Whether there are more users after this page"
          },
          "has_prev": {
            "type": "boolean",
            "title": "Has Prev",
            "description": "Whether there are users before this page"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "Number of users per page"
          }
        },
        "type": "object",
        "required": [
          "users",
          "has_next",
          "has_prev",
          "limit"
        ],
        "title": "UserListResponse",
        "description": "Response schema for user listing with cursor pagination."
      },
      "UserPreferencesResponse": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "User ID"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Preferences schema version",
            "default": "1.0"
          },
          "ui": {
            "$ref": "#/components/schemas/UIPreferencesSchema",
            "description": "UI preferences"
          },
          "notifications": {
            "$ref": "#/components/schemas/NotificationPreferencesSchema",
            "description": "Notification preferences"
          },
          "ai": {
            "$ref": "#/components/schemas/AIPreferencesSchema",
            "description": "AI preferences"
          },
          "integrations": {
            "$ref": "#/components/schemas/IntegrationPreferencesSchema",
            "description": "Integration preferences"
          },
          "privacy": {
            "$ref": "#/components/schemas/PrivacyPreferencesSchema",
            "description": "Privacy preferences"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Last update timestamp"
          },
          "timezone_mode": {
            "type": "string",
            "title": "Timezone Mode",
            "description": "Timezone mode: 'auto' or 'manual'",
            "default": "auto"
          },
          "manual_timezone": {
            "type": "string",
            "title": "Manual Timezone",
            "description": "Manual timezone override (IANA name, or empty if not set)",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "ui",
          "notifications",
          "ai",
          "integrations",
          "privacy",
          "created_at",
          "updated_at"
        ],
        "title": "UserPreferencesResponse",
        "description": "Complete user preferences response schema.",
        "example": {
          "ai": {
            "preferred_model": "gpt-4",
            "preferred_provider": "openai"
          },
          "created_at": "2024-01-01T12:00:00Z",
          "integrations": {
            "auto_sync": true,
            "google_drive_enabled": true
          },
          "manual_timezone": "America/New_York",
          "notifications": {
            "email_notifications": true,
            "summary_frequency": "daily"
          },
          "privacy": {
            "analytics": true,
            "data_collection": true
          },
          "timezone_mode": "manual",
          "ui": {
            "language": "en",
            "theme": "dark"
          },
          "updated_at": "2024-01-01T12:00:00Z",
          "user_id": "user_123"
        }
      },
      "UserPreferencesUpdate": {
        "properties": {
          "ui": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UIPreferencesSchema"
              },
              {
                "type": "null"
              }
            ],
            "description": "UI preferences to update"
          },
          "notifications": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NotificationPreferencesSchema"
              },
              {
                "type": "null"
              }
            ],
            "description": "Notification preferences to update"
          },
          "ai": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AIPreferencesSchema"
              },
              {
                "type": "null"
              }
            ],
            "description": "AI preferences to update"
          },
          "integrations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IntegrationPreferencesSchema"
              },
              {
                "type": "null"
              }
            ],
            "description": "Integration preferences to update"
          },
          "privacy": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PrivacyPreferencesSchema"
              },
              {
                "type": "null"
              }
            ],
            "description": "Privacy preferences to update"
          },
          "timezone_mode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timezone Mode",
            "description": "Timezone mode: 'auto' or 'manual'"
          },
          "manual_timezone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Manual Timezone",
            "description": "Manual timezone override (IANA name, or empty if not set)"
          }
        },
        "type": "object",
        "title": "UserPreferencesUpdate",
        "description": "User preferences update schema for partial updates.",
        "example": {
          "manual_timezone": "America/New_York",
          "notifications": {
            "email_notifications": false
          },
          "timezone_mode": "manual",
          "ui": {
            "language": "en",
            "theme": "dark"
          }
        }
      },
      "UserResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "User's email address"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name",
            "description": "User's first name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name",
            "description": "User's last name"
          },
          "profile_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Image Url",
            "description": "URL to user's profile image"
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "User's internal database ID (primary key)"
          },
          "external_auth_id": {
            "type": "string",
            "title": "External Auth Id",
            "description": "External authentication provider user ID"
          },
          "auth_provider": {
            "type": "string",
            "title": "Auth Provider",
            "description": "Authentication provider name"
          },
          "preferred_provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferred Provider",
            "description": "Preferred integration provider (google or microsoft)"
          },
          "onboarding_completed": {
            "type": "boolean",
            "title": "Onboarding Completed",
            "description": "Whether user has completed onboarding"
          },
          "onboarding_step": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Onboarding Step",
            "description": "Current onboarding step if not completed"
          },
          "created_at": {
            "title": "Created At",
            "description": "When the user was created"
          },
          "updated_at": {
            "title": "Updated At",
            "description": "When the user was last updated"
          }
        },
        "type": "object",
        "required": [
          "email",
          "id",
          "external_auth_id",
          "auth_provider",
          "onboarding_completed",
          "created_at",
          "updated_at"
        ],
        "title": "UserResponse",
        "description": "Schema for user response data."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "users",
      "description": "User profile management and operations"
    },
    {
      "name": "preferences",
      "description": "User preferences and settings management"
    },
    {
      "name": "integrations",
      "description": "OAuth integrations and provider management"
    },
    {
      "name": "providers",
      "description": "Authentication provider configuration"
    },
    {
      "name": "internal",
      "description": "Internal service-to-service endpoints"
    }
  ]
}