[tox]
envlist = format, lint, typecheck, test

[gh-actions]
python =
    3.12: py312

[testenv]
deps = -r{toxinidir}/requirements.txt
setenv =
    PYTHONPATH = {toxinidir}

[testenv:fix]
deps = black
       isort
       ruff
commands =
    black services/
    isort services/
    ruff check --fix services/

[testenv:format]
deps = black
       isort
commands =
    black --check --diff services/
    isort --check-only --diff services/

[testenv:lint]
deps = ruff
commands =
    ruff check services/

[testenv:typecheck]
deps = mypy
       types-requests
       types-pytz
       sqlmodel
allowlist_externals = bash
commands =
    # Type check each service independently in their own context
    bash -c "cd services/user_management && python -m mypy . --ignore-missing-imports --no-strict-optional --exclude='alembic/'"
    bash -c "cd services/chat_service && python -m mypy . --ignore-missing-imports --no-strict-optional --exclude='alembic/'"  
    bash -c "cd services/office_service && python -m mypy . --ignore-missing-imports --no-strict-optional --exclude='alembic/'"

[testenv:typecheck-strict]
deps = mypy
       types-requests
       types-pytz
       sqlmodel
       -r{toxinidir}/requirements.txt
commands =
    # Strict type checking for well-typed modules (gradually expand this)
    mypy services --strict

[testenv:test]
deps = pytest
       pytest-asyncio
       -r{toxinidir}/requirements.txt
commands =
    # Test each service independently to avoid import conflicts
    pytest services/user_management/tests/ -v --tb=short
    pytest services/chat_service/tests/ -v --tb=short
    pytest services/office_service/tests/ -v --tb=short

[testenv:test-cov]
deps = pytest
       pytest-cov
       pytest-asyncio
       -r{toxinidir}/requirements.txt
commands =
    pytest services/ --cov=services --cov-report=xml --cov-report=term-missing --cov-report=html

[testenv:test-fast]
deps = pytest
       pytest-asyncio
       -r{toxinidir}/requirements.txt
commands =
    pytest services/ -x -v

[testenv:py312]
deps = {[testenv:test]deps}
commands = {[testenv:test]commands}
