[tox]
envlist = format, lint, typecheck, test

[gh-actions]
python =
    3.12: py312

[testenv]
allowlist_externals = uv
setenv =
    PYTHONPATH = {toxinidir}
    UV_PYTHON = python3.12

commands_pre =
    uv pip install -e .
    uv pip install -e services/chat
    uv pip install -e services/user
    uv pip install -e services/office
    uv pip install -r requirements-dev.txt

[testenv:fix]
deps =
    uv pip install black isort ruff
commands =
    black services/
    isort services/
    ruff check --fix services/

[testenv:format]
deps =
    uv pip install black isort
commands =
    black --check --diff services/
    isort --check-only --diff services/

[testenv:lint]
deps =
    uv pip install ruff
commands =
    ruff check services/

[testenv:typecheck]
deps =
    uv pip install mypy types-requests types-pytz sqlmodel
allowlist_externals = bash
commands =
    # Type check each service independently in their own context
    bash -c "cd services/user && python -m mypy . --ignore-missing-imports --no-strict-optional --exclude='alembic/'"
    bash -c "cd services/chat && python -m mypy . --ignore-missing-imports --no-strict-optional --exclude='alembic/'"
    bash -c "cd services/office && python -m mypy . --ignore-missing-imports --no-strict-optional --exclude='alembic/'"

[testenv:typecheck-strict]
deps =
    uv pip install mypy types-requests
       types-pytz
       sqlmodel
       -r{toxinidir}/services/user/requirements.txt
       -r{toxinidir}/services/chat/requirements.txt
       -r{toxinidir}/services/office/requirements.txt
commands =
    # Strict type checking for well-typed modules (gradually expand this)
    mypy services --strict

[testenv:test]
deps = pytest
       pytest-xdist
       pytest-asyncio
       pytest-mock
       -r{toxinidir}/services/user/requirements.txt
       -r{toxinidir}/services/chat/requirements.txt
       -r{toxinidir}/services/office/requirements.txt
allowlist_externals = bash
commands =
    python -m pytest services/ -n auto -q --tb=short

[testenv:test-cov]
deps = pytest
       pytest-cov
       pytest-asyncio
       pytest-xdist
       pytest-mock
       -r{toxinidir}/services/user/requirements.txt
       -r{toxinidir}/services/chat/requirements.txt
       -r{toxinidir}/services/office/requirements.txt
allowlist_externals = bash
commands =
    # Run coverage tests from each service directory and combine results
    bash -c "cd services/user && python -m pytest tests/ --cov=. --cov-report=xml:../../coverage-user-management.xml --cov-report=term-missing -x -q"
    bash -c "cd services/chat && python -m pytest tests/ --cov=. --cov-report=xml:../../coverage-chat-service.xml --cov-report=term-missing -x -q"
    bash -c "cd services/office && python -m pytest tests/ --cov=. --cov-report=xml:../../coverage-office-service.xml --cov-report=term-missing -x -q"

[testenv:test-fast]
deps = pytest
       pytest-xdist
       pytest-asyncio
       pytest-mock
       -r{toxinidir}/services/user/requirements.txt
       -r{toxinidir}/services/chat/requirements.txt
       -r{toxinidir}/services/office/requirements.txt
allowlist_externals = bash
commands =
    # Run fast tests from each service directory (stop on first failure)
    bash -c "cd services/user && python -m pytest tests/ -x -q"
    bash -c "cd services/chat && python -m pytest tests/ -x -q"
    bash -c "cd services/office && python -m pytest tests/ -x -q"

[testenv:py312]
deps = {[testenv:test]deps}
commands = {[testenv:test]commands}
