services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    volumes:
      - ./frontend:/app:cached
    command: npm run dev
    ports:
      - "3000:3000" # For Next.js frontend
      - "8000:8000" # For Python/FastAPI backend (Note: Original 'app' service. If chat-service is also FastAPI on 8000, ports need adjustment)
    depends_on:
      - user-service
      - chat-service
      - office-service

  user-service:
    build:
      context: .
      dockerfile: Dockerfile.user-service
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    ports:
      - "8001:8001"
    depends_on:
      - db
      - redis
    environment:
      - ENVIRONMENT=${ENVIRONMENT}  # Required: local|staging|production|ci
      - DB_URL_USER=${DB_URL_USER}
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - API_FRONTEND_USER_KEY=${API_FRONTEND_USER_KEY}
      - API_CHAT_USER_KEY=${API_CHAT_USER_KEY}
      - TOKEN_ENCRYPTION_SALT=${TOKEN_ENCRYPTION_SALT}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    restart: unless-stopped

  office-service:
    build:
      context: .
      dockerfile: Dockerfile.office-service
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    ports:
      - "8003:8003"
    depends_on:
      - db
      - redis
      - user-service
    environment:
      - ENVIRONMENT=${ENVIRONMENT}  # Required: local|staging|production|ci
      - DB_URL_OFFICE=${DB_URL_OFFICE}
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:8001
      - API_FRONTEND_OFFICE_KEY=${API_FRONTEND_OFFICE_KEY}
      - API_OFFICE_USER_KEY=${API_OFFICE_USER_KEY}
      - API_BACKFILL_OFFICE_KEY=${API_BACKFILL_OFFICE_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    restart: unless-stopped

  chat-service:
    build:
      context: .
      dockerfile: Dockerfile.chat-service
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    ports:
      - "8002:8002" # Chat service on port 8002
    depends_on:
      - db # Assuming it might use the main db or its own
      - user-service # If it needs to authenticate/call user-service
      - office-service # If it needs to call office-service
    environment:
      - ENVIRONMENT=${ENVIRONMENT}  # Required: local|staging|production|ci
      - DB_URL_CHAT=${DB_URL_CHAT}
      - USER_SERVICE_URL=http://user-service:8001
      - OFFICE_SERVICE_URL=http://office-service:8003
      - API_FRONTEND_CHAT_KEY=${API_FRONTEND_CHAT_KEY}
      - API_CHAT_USER_KEY=${API_CHAT_USER_KEY}
      - API_CHAT_OFFICE_KEY=${API_CHAT_OFFICE_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_PROVIDER=${LLM_PROVIDER}
      - LLM_MODEL=${LLM_MODEL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

  db:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      # Admin user credentials
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      
      # Service-specific database passwords
      BRIEFLY_USER_SERVICE_PASSWORD: ${BRIEFLY_USER_SERVICE_PASSWORD}
      BRIEFLY_MEETINGS_SERVICE_PASSWORD: ${BRIEFLY_MEETINGS_SERVICE_PASSWORD}
      BRIEFLY_SHIPMENTS_SERVICE_PASSWORD: ${BRIEFLY_SHIPMENTS_SERVICE_PASSWORD}
      BRIEFLY_OFFICE_SERVICE_PASSWORD: ${BRIEFLY_OFFICE_SERVICE_PASSWORD}
      BRIEFLY_CHAT_SERVICE_PASSWORD: ${BRIEFLY_CHAT_SERVICE_PASSWORD}
      BRIEFLY_VECTOR_SERVICE_PASSWORD: ${BRIEFLY_VECTOR_SERVICE_PASSWORD}
      BRIEFLY_READONLY_PASSWORD: ${BRIEFLY_READONLY_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

volumes:
  postgres_data:
