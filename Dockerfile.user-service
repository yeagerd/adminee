# Dockerfile for User Management Service (Python/FastAPI)

# Use an official Python runtime as a parent image
FROM python:3.11-slim-bullseye

# Set environment variables for Python
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set the working directory in the container
WORKDIR /app

# Install system dependencies including GCP SDK if needed
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc \
        libpq-dev \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements file and install Python dependencies
COPY services/user/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the common module first (shared dependencies)
COPY services/common/ ./services/common/

# Copy the user management service code
COPY services/user/ ./services/user/

# Set Python path to include the services directory
ENV PYTHONPATH=/app

# Environment configuration - REQUIRED at build time
ARG ENVIRONMENT
ENV ENVIRONMENT=${ENVIRONMENT}

# Validate ENVIRONMENT value
RUN if [ -z "$ENVIRONMENT" ]; then \
        echo "ERROR: ENVIRONMENT build arg is required (local|staging|production)" && exit 1; \
    fi && \
    if [ "$ENVIRONMENT" != "local" ] && [ "$ENVIRONMENT" != "staging" ] && [ "$ENVIRONMENT" != "production" ]; then \
        echo "ERROR: ENVIRONMENT must be one of: local, staging, production. Got: $ENVIRONMENT" && exit 1; \
    fi

# GCP Project ID for Secret Manager (set by Cloud Run automatically)
ENV GOOGLE_CLOUD_PROJECT=""

# Note: In production, secrets are retrieved via:
# 1. Secret Manager SDK calls (preferred)
# 2. Cloud Run secret mounts as environment variables
# Local development uses docker-compose environment variables

# Expose the port the app runs on
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Define the command to run the application
CMD ["uvicorn", "services.user.main:app", "--host", "0.0.0.0", "--port", "8001"]